Open Close Principle - 
1.	Software entities like classes, modules and functions should be open for extension but closed for modifications.
Dependency Inversion Principle - 
1.	High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions.
Interface Segregation Principle - 
1.	Clients should not be forced to depend upon interfaces that they don't use. This principle teaches us to take care how we write our interfaces. When we write our interfaces we should take care to add only methods that should be there.
Single Responsibility Principle - 
1.	A class should have only one reason to change. This principle states that if we have 2 reasons to change for a class, we have to split the functionality in two classes.
Liskov's Substitution Principle - 
1.	Derived types must be completely substitutable for their base types.
This principle is just an extension of the Open Close Principle in terms of behavior meaning that we must make sure that new derived classes are extending the base classes without changing their behavior. The new derived classes should be able to replace the base classes without any change in the code.




